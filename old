#include <iostream>
#include <nlohmann/json.hpp>
#include <fstream>
#include <vector>
#include <string>

using json = nlohmann::json;

// open (create) json file
std::fstream f;

// check if file is empty
bool isFileEmpty(const std::string& filename) {
    std::ifstream file(filename);
    return file.peek() == std::ifstream::traits_type::eof();
}

// load tasks from file or initialize as empty array
json loadTasks(const std::string& filename) {
    if (isFileEmpty(filename)) {
        std::cout << "[DEBUG] File is empty. Initializing with an empty array.\n";
        return json::array();
    }

    std::ifstream f(filename);
    try {
        json tasks = json::parse(f);
        f.close();
        return tasks;
    } catch (json::parse_error& e) {
        std::cerr << "[ERROR] Failed to parse JSON: " << e.what() << "\n";
        return json::array();
    }
}

int generateId() {
    if (isFileEmpty("tasks.json")) {
        std::cout << "[DEBUG] json file is empty for now \n";
        return 0;
    }
    std::ifstream file("tasks.json");
    json tasks = json::parse(f);
    int highest_id = 0;

    for (auto &task : tasks) {
        if (task["id"] > highest_id) {
            highest_id = task["id"];
        }
    }
    highest_id++;
    std::cout << "[DEBUG] new id is " << highest_id << std::endl;
    f.close();
    return highest_id;
}

int main(int argc, char *argv[]) {

    if (argc <= 1) {
        std::cout << "\nno arguments.\ntry 'task-tracker help' to see available commands.\n" << std::endl;
        return 0;
    }

    std::string command(argv[1]); // get first argument

    if (command.compare("help") == 0) {
        std::cout << "\nlist of available commands:\n\n";
        std::cout << " - add <task name>\n";
        std::cout << " - update <id> <new-text>\n";
        std::cout << " - delete <id>\n";
        std::cout << " - mark-in-progress <id>\n";
        std::cout << " - mark-done <id>\n";
        std::cout << " - list\n\n";
    }

    if (command == "add") {
        if (argc <= 2) {
            std::cout << "\nnot enough arguments (expected 2).\n\n";
            return 0;
        }

        int id = generateId();
        json tasks = loadTasks("tasks.json");

        std::string taskName(argv[2]);
        json newTask;
        newTask["id"] = id;
        newTask["name"] = taskName;
        std::cout << "[DEBUG] here is json for new task\n" << newTask.dump(0) << std::endl;
        tasks.push_back(newTask);

        std::ofstream outFile("tasks.json");
        outFile << tasks.dump(4);
        outFile.close();

        return 0;
    }

    if (command == "update") {
        
    }

    if (command == "delete") {
        
    }

    if (command == "mark-in-progress") {
        
    }

    if (command == "mark-done") {
        
    }

    if (command == "list") {
    
    }

    return 0;
}